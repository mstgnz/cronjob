openapi: 3.0.0
info:
  title: "Cronjob API Documentation"
  description: "Defining cronjob tasks in the crontab on a server and tracking and managing these tasks can be challenging. In this project, you can input cronjob definitions for all your projects and the corresponding URL information. This allows requests to be sent to the specified URLs on your behalf at the designated times."
  version: "1.0.0"
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
paths:
  /api/login:
    post:
      summary: "User Login"
      operationId: "UserLogin"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: "Success login"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "token": "eyJhbGciOiJIUzI.eyJpc3MiOiIxIiwiZXhwI.yyMRyoRa1H8sjqwajdVUyK",
                  }
  /api/register:
    post:
      summary: "User Create"
      operationId: "UserCreate"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullname
                - email
                - password
                - phone
              properties:
                fullname:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
                phone:
                  type: string
      responses:
        200:
          description: "User Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "token": "eyJhbGciOiJIUzI.eyJpc3MiOiIxIiwiZXhwI.yyMRyoRa1H8sjqwajdVUyK",
                    "user":
                      {
                        "id": 1,
                        "fullname": "John DOE",
                        "email": "johndone@gmail.com",
                        "phone": "5432222222",
                        "is_admin": false,
                      },
                  }
  /api/user:
    get:
      summary: "Get User"
      operationId: "GetUser"
      tags:
        - "User"
      security:
        - BearerAuth: ["Authorization"]
      responses:
        200:
          description: "User"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  {
                    "id": 1,
                    "fullname": "your fullname",
                    "email": "your email",
                    "phone": "your phone",
                    "is_admin": true,
                  }
  /api/user/{id}:
    put:
      summary: "User Update"
      operationId: "UserUpdate"
      tags:
        - "User"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "User ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        200:
          description: "User Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "fullname": "your fullname",
                    "email": "your email",
                    "phone": "your phone",
                  }
  /api/user-change-pass:
    put:
      summary: "User Change Pass"
      operationId: "UserChangePass"
      tags:
        - "User"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - re-password
              properties:
                password:
                  type: string
                  format: password
                re-password:
                  type: string
                  format: password
      responses:
        200:
          description: "User Change Pass"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data: { "password": "your-pass", "re-password": "your-pass" }
  /api/groups:
    get:
      summary: "Get Groups"
      operationId: "GetGroups"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "query"
          description: "Group ID"
          schema:
            type: integer
        - name: "uid"
          in: "query"
          description: "Group Parent ID"
          schema:
            type: integer
      responses:
        200:
          description: "List of Groups"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "uid": 0,
                      "user_id": 0,
                      "name": "cronjob2",
                      "active": true,
                      "created_at": "2024-06-15T18:39:33.512951Z",
                    },
                  ]
    post:
      summary: "Create Group"
      operationId: "CreateGroup"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - active
              properties:
                name:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Group Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "uid": 0,
                    "user_id": 1,
                    "name": "cronjob2",
                    "active": true,
                  }
  /api/groups/{id}:
    put:
      summary: "Update Group"
      operationId: "UpdateGroup"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Group Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data: { "uid": 0, "user_id": 0, "name": "", "active": false }
    delete:
      summary: "Delete Group"
      operationId: "DeleteGroup"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Group Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
  /api/requests:
    get:
      summary: "Get Requests"
      operationId: "GetRequests"
      tags:
        - "Request"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "query"
          description: "Request ID"
          schema:
            type: integer
        - name: "url"
          in: "query"
          description: "Request URL"
          schema:
            type: string
      responses:
        200:
          description: "List of Requests"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "url": "https://request.net.tr",
                      "method": "POST",
                      "content": '{"Content-Type": "application/json"}',
                      "active": true,
                      "created_at": "2024-06-15T20:51:22.067506Z",
                    },
                  ]
    post:
      summary: "Create Request"
      operationId: "Create Request"
      tags:
        - "Request"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
                - method
                - content
                - active
              properties:
                url:
                  type: string
                method:
                  type: string
                content:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Request Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "user_id": 1,
                    "url": "https://request.net.tr",
                    "method": "POST",
                    "content": '{"Content-Type": "application/json"}',
                    "active": true,
                  }
  /api/requests/{id}:
    put:
      summary: "Update Request"
      operationId: "UpdateRequest"
      tags:
        - "Request"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Request ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                method:
                  type: string
                content:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Request Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "user_id": 1,
                    "url": "https://request.net.tr",
                    "method": "POST",
                    "content": '{"Content-Type": "application/json"}',
                    "active": false,
                  }
    delete:
      summary: "Delete Request"
      operationId: "Delete Request"
      tags:
        - "Request"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Request ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Request Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
  /api/request-headers:
    get:
      summary: "Get Request Headers"
      operationId: "GetRequestHeaders"
      tags:
        - "Request Header"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "query"
          description: "Request Header ID"
          schema:
            type: integer
        - name: "key"
          in: "query"
          description: "Request Header key"
          schema:
            type: string
      responses:
        200:
          description: "List of Request Headers"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "request_id": 1,
                      "key": "access",
                      "value": "token",
                      "active": true,
                      "created_at": "2024-06-15T21:02:36.767472Z",
                    },
                  ]
    post:
      summary: "Create Request Headers"
      operationId: "CreateRequestHeader"
      tags:
        - "Request Header"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - request_id
                - key
                - value
                - active
              properties:
                request_id:
                  type: integer
                key:
                  type: string
                value:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Request Header Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "request_id": 1,
                    "key": "access",
                    "value": "token",
                    "active": true,
                  }
  /api/request-headers/{id}:
    put:
      summary: "Update Request Header"
      operationId: "UpdateRequestHeader"
      tags:
        - "Request Header"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Request Header ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                request_id:
                  type: integer
                key:
                  type: string
                value:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Request Header Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "request_id": 1,
                    "key": "access",
                    "value": "token",
                    "active": true,
                  }
    delete:
      summary: "Delete Request Header"
      operationId: "DeleteRequestHeader"
      tags:
        - "Request Header"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Request Header ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Request Header Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
  /api/notifications:
    get:
      summary: "Get Notifications"
      operationId: "GetNotifications"
      tags:
        - "Notification"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "query"
          description: "Notification ID"
          schema:
            type: integer
        - name: "title"
          in: "query"
          description: "Notification title"
          schema:
            type: string
      responses:
        200:
          description: "List of Notifications"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "title": "title 4",
                      "content": "content",
                      "is_mail": false,
                      "is_message": true,
                      "active": true,
                      "created_at": "2024-06-15T21:10:01.713764Z",
                    },
                  ]
    post:
      summary: "Create Notifications"
      operationId: "CreateNotification"
      tags:
        - "Notification"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - is_mail
                - is_message
                - active
              properties:
                title:
                  type: string
                content:
                  type: string
                is_mail:
                  type: boolean
                is_message:
                  type: boolean
                active:
                  type: boolean
      responses:
        200:
          description: "Notification Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "user_id": 1,
                    "title": "title 4",
                    "content": "content",
                    "is_mail": false,
                    "is_message": true,
                    "active": true,
                  }
  /api/notifications/{id}:
    put:
      summary: "Update Notification"
      operationId: "UpdateNotification"
      tags:
        - "Notification"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Notification ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                is_mail:
                  type: boolean
                is_message:
                  type: boolean
                active:
                  type: boolean
      responses:
        200:
          description: "Notification Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "user_id": 1,
                    "title": "title 4",
                    "content": "content",
                    "is_mail": false,
                    "is_message": true,
                    "active": true,
                  }
    delete:
      summary: "Delete Notification"
      operationId: "DeleteNotification"
      tags:
        - "Notification"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Notification ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Notification Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
  /api/notify-emails:
    get:
      summary: "Get Notify Emails"
      operationId: "GetNotifyEmails"
      tags:
        - "Notify Email"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "query"
          description: "Notify Email ID"
          schema:
            type: integer
        - name: "email"
          in: "query"
          description: "Notify Email email"
          schema:
            type: string
      responses:
        200:
          description: "List of Notify Emails"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "user_id": 1,
                      "title": "title 4",
                      "content": "content",
                      "is_mail": false,
                      "is_message": true,
                      "active": true,
                      "created_at": "2024-06-15T21:10:01.713764Z",
                    },
                  ]
    post:
      summary: "Create Notify Email"
      operationId: "CreateNotifyEmail"
      tags:
        - "Notify Email"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - notification_id
                - email
                - active
              properties:
                notification_id:
                  type: integer
                email:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Notify Email Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "notification_id": 1,
                    "email": "abcd@defa.com",
                    "active": true,
                  }
  /api/notify-emails/{id}:
    put:
      summary: "Update Notify Email"
      operationId: "UpdateNotifyEmail"
      tags:
        - "Notify Email"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Notify Email ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_id:
                  type: integer
                email:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Notify Email Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "notification_id": 1,
                    "email": "abcd@defa.com",
                    "active": true,
                  }
    delete:
      summary: "Delete Notify Email"
      operationId: "DeleteNotifyEmail"
      tags:
        - "Notify Email"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Notify Email ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Notify Email Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
  /api/notify-messages:
    get:
      summary: "Get Notify Messages"
      operationId: "GetNotifyMessages"
      tags:
        - "Notify Message"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "query"
          description: "Notify Message ID"
          schema:
            type: integer
        - name: "phone"
          in: "query"
          description: "Notify Message phone"
          schema:
            type: string
      responses:
        200:
          description: "List of Notify Messagees"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "notification_id": 1,
                      "phone": "+905433434493",
                      "active": true,
                      "created_at": "2024-06-15T21:17:43.12957Z",
                    },
                  ]
    post:
      summary: "Create Notify Message"
      operationId: "CreateNotifyMessage"
      tags:
        - "Notify Message"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - notification_id
                - phone
                - active
              properties:
                notification_id:
                  type: integer
                phone:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Notify Message Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "notification_id": 1,
                    "phone": "+905433434493",
                    "active": true,
                  }
  /api/notify-messages/{id}:
    put:
      summary: "Update Notify Message"
      operationId: "UpdateNotifyMessage"
      tags:
        - "Notify Message"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Notify Message ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_id:
                  type: integer
                phone:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Notify Message Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "notification_id": 1,
                    "phone": "+905433434493",
                    "active": true,
                  }
    delete:
      summary: "Delete Notify Message"
      operationId: "DeleteNotifyMessage"
      tags:
        - "Notify Message"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Notify Message ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Notify Message Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
