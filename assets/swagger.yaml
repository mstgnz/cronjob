openapi: 3.0.0
info:
  title: "Cronjob API Documentation"
  description: "Defining cronjob tasks in the crontab on a server and tracking and managing these tasks can be challenging. In this project, you can input cronjob definitions for all your projects and the corresponding URL information. This allows requests to be sent to the specified URLs on your behalf at the designated times."
  version: "1.0.0"
components:
  securitySchemes:
    BearerAuth:
      type: apiKey
      in: header
      name: Authorization
paths:
  /api/login:
    post:
      summary: "User Login"
      operationId: "UserLogin"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: "Success login"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "token": "eyJhbGciOiJIUzI.eyJpc3MiOiIxIiwiZXhwI.yyMRyoRa1H8sjqwajdVUyK",
                  }
  /api/register:
    post:
      summary: "User Register"
      operationId: "UserRegister"
      tags:
        - "Auth"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullname
                - email
                - password
                - phone
              properties:
                fullname:
                  type: string
                email:
                  type: string
                password:
                  type: string
                  format: password
                phone:
                  type: string
      responses:
        200:
          description: "User Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "token": "eyJhbGciOiJIUzI.eyJpc3MiOiIxIiwiZXhwI.yyMRyoRa1H8sjqwajdVUyK",
                    "user":
                      {
                        "id": 1,
                        "fullname": "John DOE",
                        "email": "johndone@gmail.com",
                        "phone": "5432222222",
                        "is_admin": false,
                      },
                  }
  /api/user:
    get:
      summary: "Get User"
      operationId: "GetUser"
      tags:
        - "User"
      security:
        - BearerAuth: ["Authorization"]
      responses:
        200:
          description: "User"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  {
                    "id": 1,
                    "fullname": "your fullname",
                    "email": "your email",
                    "phone": "your phone",
                    "is_admin": true,
                  }
  /api/user/{id}:
    put:
      summary: "User Update"
      operationId: "UserUpdate"
      tags:
        - "User"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "User ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                phone:
                  type: string
      responses:
        200:
          description: "User Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "fullname": "your fullname",
                    "email": "your email",
                    "phone": "your phone",
                  }
  /api/user-change-pass:
    put:
      summary: "User Change Pass"
      operationId: "UserChangePass"
      tags:
        - "User"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - re-password
              properties:
                password:
                  type: string
                  format: password
                re-password:
                  type: string
                  format: password
      responses:
        200:
          description: "User Change Pass"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data: { "password": "your-pass", "re-password": "your-pass" }
  /api/groups:
    get:
      summary: "Get Groups"
      operationId: "GetGroups"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      responses:
        200:
          description: "List of groups"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                result:
                  [
                    {
                      "id": 1,
                      "uid": 0,
                      "user_id": 0,
                      "name": "cronjob2",
                      "active": true,
                      "created_at": "2024-06-15T18:39:33.512951Z",
                    },
                  ]
    post:
      summary: "Group Register"
      operationId: "GroupRegister"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - active
              properties:
                name:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Group Create"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data:
                  {
                    "id": 1,
                    "uid": 0,
                    "user_id": 1,
                    "name": "cronjob2",
                    "active": true,
                  }
  /api/groups/{id}:
    put:
      summary: "Group Update"
      operationId: "GroupUpdate"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          schema:
            type: "integer"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - active
              properties:
                name:
                  type: string
                active:
                  type: boolean
      responses:
        200:
          description: "Group Update"
          content:
            application/json:
              example:
                status: true
                message: "Success"
                data: { "uid": 0, "user_id": 0, "name": "", "active": false }
    delete:
      summary: "Group Delete"
      operationId: "GroupDelete"
      tags:
        - "Group"
      security:
        - BearerAuth: ["Authorization"]
      parameters:
        - name: "id"
          in: "path"
          description: "Group ID"
          schema:
            type: "integer"
          required: true
      responses:
        200:
          description: "Group Delete"
          content:
            application/json:
              example:
                status: true
                message: "Soft delte success"
                data: null
